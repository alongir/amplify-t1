import{__rest as o}from"tslib";import*as e from"react";import{ComponentPropsToStylePropsMap as r}from"../types/style.js";import{getValueAtCurrentBreakpoint as t}from"./responsive/utils.js";import{useBreakpoint as n}from"./responsive/useBreakpoint.js";import"../../components/ThemeProvider/AmplifyContext.js";import{useTheme as s}from"../../hooks/useTheme.js";import{isNullOrEmptyString as p,isEmptyString as a}from"./utils.js";const i=o=>"auto"===o||"number"==typeof o&&!isNaN(o)||"string"==typeof o&&!isNaN(parseFloat(o)),u=o=>"auto"===o?"auto":`span ${o}`,m=o=>{if(i(o))return u(o);if(Array.isArray(o))return o.map((o=>u(o)));if("object"==typeof o&&null!=o){const e={};return Object.entries(o).forEach((([o,r])=>{e[o]=u(r)})),e}return null},l=r=>{const{rowSpan:t,columnSpan:n,row:s,column:a}=r,i=o(r,["rowSpan","columnSpan","row","column"]),{rowFromSpanValue:u,columnFromSpanValue:l}=e.useMemo((()=>({rowFromSpanValue:m(t),columnFromSpanValue:m(n)})),[t,n]);return Object.assign({row:p(s)?u:s,column:p(a)?l:a},i)},c=({props:o={},style:e={},breakpoint:n,breakpoints:s,tokens:p})=>{const i={};return Object.keys(o).filter((e=>null!=o[e])).forEach((u=>{if(u in r){if(!a(o[u])){const a=o[u],i=r[u];e=Object.assign(Object.assign({},e),{[i]:t({values:a,breakpoint:n,breakpoints:s,propKey:u,tokens:p})})}}else i[u]=o[u]})),{propStyles:e,nonStyleProps:i}},f=(o,r)=>{const{breakpoints:{values:t,defaultBreakpoint:p},tokens:a}=s(),i=n({breakpoints:t,defaultBreakpoint:p}),u=l(o);return e.useMemo((()=>c({props:u,style:r,breakpoint:i,breakpoints:t,tokens:a})),[u,r,t,i,a])};export{m as convertGridSpan,c as convertStylePropsToStyleObj,u as getGridSpan,i as isSpanPrimitiveValue,f as useStyles,l as useTransformStyleProps};
